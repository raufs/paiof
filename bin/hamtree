#!/usr/bin/env python3

### Program: hamtree
### Author: Rauf Salamzade
### Kalan Lab
### UW Madison, Department of Medical Microbiology and Immunology

# BSD 3-Clause License
#
# Copyright (c) 2023, Rauf Salamzade
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)

import os
import sys
from paiof import util
from time import sleep
import argparse
import pkg_resources

version = pkg_resources.require("paiof")[0].version

def create_parser():
	""" Parse arguments """
	parser = argparse.ArgumentParser(description="""
	Program: hamtree
	Author: Rauf Salamzade
	Affiliation: Kalan Lab, UW Madison, Department of Medical Microbiology and Immunology


	""", formatter_class=argparse.RawTextHelpFormatter)

	parser.add_argument('-i', '--orthofinder_results_dir', help='Directory with results from OrthoFinder (Note, this usually starts with Results_DATE/).', required=True)
	parser.add_argument('-o', '--output_directory', help='Output directory.', required=True)
	parser.add_argument('-p', '--perform_pca', action='store_true', help="Also perform PCA analysis based on orthogroup presence/absence.")
	parser.add_argument('-v', '--version', action='store_true', help="Report version of paiof/hamtree.", required=False, default=False)
	args = parser.parse_args()
	return args

def hamtree():
	if len(sys.argv)>1 and ('-v' in set(sys.argv) or '--version' in set(sys.argv)):
		sys.stderr.write('Version of paiof/hamtree being used is: ' + str(version) + '\n')
		sys.exit(0)
	
	# Parse arguments
	myargs = create_parser()

	ofdir = myargs.orthofinder_results_dir
	outdir = os.path.abspath(myargs.output_directory) + '/'
	perform_pca_flag = myargs.perform_pca

	og_file = None
	try:
		assert(os.path.isdir(ofdir))
		ofdir = os.path.abspath(ofdir) + '/'
		og_file = ofdir + 'Orthogroups/Orthogroups.tsv'
		assert(os.path.isfile(og_file))
	except:
		sys.stderr.write("ERROR: Either the OrthoFinder results directory doesn't exist or the\nOrthogroups/Orthogroups.tsv or sub-file does not exist...\n")
		sys.exit(1)

	if os.path.isdir(outdir):
		sys.stderr.write("Output directory already exists! Overwriting in 5 seconds...\n")
		sleep(5)
	else:
		util.setupDirectories([outdir])

	# Create logging object
	log_file = outdir + 'Progress.log'
	logObject = util.createLoggerObject(log_file)
	parameters_file = outdir + 'Command_Issued.txt'
	sys.stdout.write('Running version %s\n' % version)
	sys.stdout.write("Appending command issued for future records to: %s\n" % parameters_file)
	sys.stdout.write("Logging more details at: %s\n" % log_file)
	logObject.info("\nNEW RUN!!!\n**************************************")
	logObject.info('Running version %s' % version)
	logObject.info("Appending command issued for future records to: %s" % parameters_file)

	parameters_handle = open(parameters_file, 'a+')
	parameters_handle.write(' '.join(sys.argv) + '\n')
	parameters_handle.close()

	# step 0: create Hamming distance based on orthogroup presence/absence
	hd_mat, og_mat, samples, ogs = util.processOrthogroupsTsvForHammingDistance(og_file, logObject)
	
	# step 1: use scikit-bio's nj function to create a 
	hamtree_result_newick = outdir + 'HamTree.newick'
	util.createNJTree(hamtree_result_newick, hd_mat, samples, logObject)

	# step 2: run PCA analysis if requested
	if perform_pca_flag:
		util.performPCA(outdir, og_mat, samples, ogs, logObject)

	# close logging object and exit
	logObject.info('******************\nhamtree finished!\n******************')
	sys.stdout.write('******************\nhamtree finished!\n******************\n')
	util.closeLoggerObject(logObject)
	sys.exit(0)

if __name__ == '__main__':
	hamtree()
